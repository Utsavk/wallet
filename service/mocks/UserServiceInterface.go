// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "wallet/context"
	errors "wallet/errors"

	mock "github.com/stretchr/testify/mock"

	models "wallet/models"

	repository "wallet/repository"

	service "wallet/service"
)

// UserServiceInterface is an autogenerated mock type for the UserServiceInterface type
type UserServiceInterface struct {
	mock.Mock
}

// CreateDBUser provides a mock function with given fields: ctx, userInput
func (_m *UserServiceInterface) CreateDBUser(ctx *context.Ctx, userInput *repository.CreateUserInputData) (int64, *errors.Err) {
	ret := _m.Called(ctx, userInput)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*context.Ctx, *repository.CreateUserInputData) int64); ok {
		r0 = rf(ctx, userInput)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 *errors.Err
	if rf, ok := ret.Get(1).(func(*context.Ctx, *repository.CreateUserInputData) *errors.Err); ok {
		r1 = rf(ctx, userInput)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Err)
		}
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, args
func (_m *UserServiceInterface) CreateUser(ctx *context.Ctx, args service.NewUserArgs) (int64, *errors.Err) {
	ret := _m.Called(ctx, args)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*context.Ctx, service.NewUserArgs) int64); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 *errors.Err
	if rf, ok := ret.Get(1).(func(*context.Ctx, service.NewUserArgs) *errors.Err); ok {
		r1 = rf(ctx, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Err)
		}
	}

	return r0, r1
}

// GetDBUserByID provides a mock function with given fields: ctx, id
func (_m *UserServiceInterface) GetDBUserByID(ctx *context.Ctx, id int) (*models.User, *errors.Err) {
	ret := _m.Called(ctx, id)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(*context.Ctx, int) *models.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 *errors.Err
	if rf, ok := ret.Get(1).(func(*context.Ctx, int) *errors.Err); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Err)
		}
	}

	return r0, r1
}

// GetUserDetailsByID provides a mock function with given fields: ctx, id
func (_m *UserServiceInterface) GetUserDetailsByID(ctx *context.Ctx, id string) (*service.User, *errors.Err) {
	ret := _m.Called(ctx, id)

	var r0 *service.User
	if rf, ok := ret.Get(0).(func(*context.Ctx, string) *service.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.User)
		}
	}

	var r1 *errors.Err
	if rf, ok := ret.Get(1).(func(*context.Ctx, string) *errors.Err); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Err)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewUserServiceInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserServiceInterface creates a new instance of UserServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserServiceInterface(t mockConstructorTestingTNewUserServiceInterface) *UserServiceInterface {
	mock := &UserServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
