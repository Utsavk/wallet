// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	errors "wallet/errors"
	models "wallet/models"

	mock "github.com/stretchr/testify/mock"

	service "wallet/service"
)

// SessionServiceInterface is an autogenerated mock type for the SessionServiceInterface type
type SessionServiceInterface struct {
	mock.Mock
}

// CreateDBSession provides a mock function with given fields: userID
func (_m *SessionServiceInterface) CreateDBSession(userID uint) (*models.Session, *errors.Err) {
	ret := _m.Called(userID)

	var r0 *models.Session
	if rf, ok := ret.Get(0).(func(uint) *models.Session); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Session)
		}
	}

	var r1 *errors.Err
	if rf, ok := ret.Get(1).(func(uint) *errors.Err); ok {
		r1 = rf(userID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Err)
		}
	}

	return r0, r1
}

// CreateSession provides a mock function with given fields: userID
func (_m *SessionServiceInterface) CreateSession(userID uint) (*service.Session, *errors.Err) {
	ret := _m.Called(userID)

	var r0 *service.Session
	if rf, ok := ret.Get(0).(func(uint) *service.Session); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.Session)
		}
	}

	var r1 *errors.Err
	if rf, ok := ret.Get(1).(func(uint) *errors.Err); ok {
		r1 = rf(userID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Err)
		}
	}

	return r0, r1
}

// DeleteDBSessionByID provides a mock function with given fields: id
func (_m *SessionServiceInterface) DeleteDBSessionByID(id uint) *errors.Err {
	ret := _m.Called(id)

	var r0 *errors.Err
	if rf, ok := ret.Get(0).(func(uint) *errors.Err); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.Err)
		}
	}

	return r0
}

// DeleteSessionByID provides a mock function with given fields: id
func (_m *SessionServiceInterface) DeleteSessionByID(id uint) *errors.Err {
	ret := _m.Called(id)

	var r0 *errors.Err
	if rf, ok := ret.Get(0).(func(uint) *errors.Err); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errors.Err)
		}
	}

	return r0
}

// GetDBSessionByID provides a mock function with given fields: id
func (_m *SessionServiceInterface) GetDBSessionByID(id uint) (*models.Session, *errors.Err) {
	ret := _m.Called(id)

	var r0 *models.Session
	if rf, ok := ret.Get(0).(func(uint) *models.Session); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Session)
		}
	}

	var r1 *errors.Err
	if rf, ok := ret.Get(1).(func(uint) *errors.Err); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Err)
		}
	}

	return r0, r1
}

// GetDBSessionByToken provides a mock function with given fields: token
func (_m *SessionServiceInterface) GetDBSessionByToken(token string) (*models.Session, *errors.Err) {
	ret := _m.Called(token)

	var r0 *models.Session
	if rf, ok := ret.Get(0).(func(string) *models.Session); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Session)
		}
	}

	var r1 *errors.Err
	if rf, ok := ret.Get(1).(func(string) *errors.Err); ok {
		r1 = rf(token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Err)
		}
	}

	return r0, r1
}

// GetDBSessionByUserID provides a mock function with given fields: userID
func (_m *SessionServiceInterface) GetDBSessionByUserID(userID uint) (*models.Session, *errors.Err) {
	ret := _m.Called(userID)

	var r0 *models.Session
	if rf, ok := ret.Get(0).(func(uint) *models.Session); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Session)
		}
	}

	var r1 *errors.Err
	if rf, ok := ret.Get(1).(func(uint) *errors.Err); ok {
		r1 = rf(userID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Err)
		}
	}

	return r0, r1
}

// GetSessionByID provides a mock function with given fields: id
func (_m *SessionServiceInterface) GetSessionByID(id uint) (*service.Session, *errors.Err) {
	ret := _m.Called(id)

	var r0 *service.Session
	if rf, ok := ret.Get(0).(func(uint) *service.Session); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.Session)
		}
	}

	var r1 *errors.Err
	if rf, ok := ret.Get(1).(func(uint) *errors.Err); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Err)
		}
	}

	return r0, r1
}

// GetSessionByUserID provides a mock function with given fields: userID
func (_m *SessionServiceInterface) GetSessionByUserID(userID uint) (*service.Session, *errors.Err) {
	ret := _m.Called(userID)

	var r0 *service.Session
	if rf, ok := ret.Get(0).(func(uint) *service.Session); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.Session)
		}
	}

	var r1 *errors.Err
	if rf, ok := ret.Get(1).(func(uint) *errors.Err); ok {
		r1 = rf(userID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Err)
		}
	}

	return r0, r1
}

// UpdateDBSessionByID provides a mock function with given fields: id
func (_m *SessionServiceInterface) UpdateDBSessionByID(id uint) (*models.Session, *errors.Err) {
	ret := _m.Called(id)

	var r0 *models.Session
	if rf, ok := ret.Get(0).(func(uint) *models.Session); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Session)
		}
	}

	var r1 *errors.Err
	if rf, ok := ret.Get(1).(func(uint) *errors.Err); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Err)
		}
	}

	return r0, r1
}

// UpdateSessionByID provides a mock function with given fields: id
func (_m *SessionServiceInterface) UpdateSessionByID(id uint) (*service.Session, *errors.Err) {
	ret := _m.Called(id)

	var r0 *service.Session
	if rf, ok := ret.Get(0).(func(uint) *service.Session); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.Session)
		}
	}

	var r1 *errors.Err
	if rf, ok := ret.Get(1).(func(uint) *errors.Err); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errors.Err)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewSessionServiceInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewSessionServiceInterface creates a new instance of SessionServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSessionServiceInterface(t mockConstructorTestingTNewSessionServiceInterface) *SessionServiceInterface {
	mock := &SessionServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
